openapi: "3.0.0"
servers:
  - url: localhost:8080/v1
info:
  title: "Flight Booking API Documentation"
  version: "1.0.0"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Signup:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    SignupResponse:
      type: object
      properties:
        access_token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Signin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    SigninResponse:
      type: object
      properties:
        access_token:
          type: string

    Flight:
      type: object
      required:
        - start_date
        - end_date
        - departure
        - destination
      properties:
        id:
          type: string
        start_date:
          type: string
        end_date:
          type: string
        departure:
          type: string
        destination:
          type: string
        creation_date:
          type: string
        ticket_prices:
          type: array
          items:
            $ref: '#/components/schemas/FlightPrice'

    Rank:
      type: object
      properties:
        name:
          type: string

    FlightPrice:
      type: object
      required:
        - rank
        - price
      properties:
        flight_id:
          type: string
          description: reference to flight id
        rank:
          type: string
          description: reference to ticket rank name
        price:
          type: integer

    Ticket:
      type: object
      properties:
        flight_id:
          type: string
          description: reference to flight id
        rank:
          type: string
          description: reference to rank name
        price:
          type: integer
        creation_date:
          type: string
        user_id:
          type: string
          description: reference to user id

    BookTicket:
      type: object
      required:
        - flight_id
        - rank
      properties:
        flight_id:
          type: string
          description: reference to flight id
        rank:
          type: string
          description: reference to rank enum
    UpdateTicket:
      type: object
      required:
        - rank
      properties:
        rank:
          description: reference to rank enum
          type: string


    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        phone:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    UpdateUser:
      type: object
      required:
        - email
        - phone
      properties:
        email:
          type: string
        phone:
          type: string

    ErrorResponse:
      type: object
      properties:
        message:
          type: string

security:
  - BearerAuth: [ ]

paths:
  /auth/signup:
    post:
      description: "Sign up a new user"
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/signin:
    post:
      description: "Sign in an existing user"
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signin'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponse'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/flights:
    get:
      description: "Get all flights"
      tags:
        - flights
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      description: "Create a new flight"
      tags:
        - flights
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
      responses:
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/flights/{flightId}:
    parameters:
      - name: flightId
        in: path
        required: true
        schema:
          type: string
    get:
      description: "Get a flight by ID"
      tags:
        - flights
      security:
        - BearerAuth: [ ]
      parameters:
        - name: available
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "Flight not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      description: "Update a flight by ID"
      tags:
        - flights
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "Flight not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      description: "Delete a flight by ID"
      tags:
        - flights
      security:
        - BearerAuth: [ ]
      responses:
        '204':
          description: "No Content"
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "Flight not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      description: "Get all users"
      tags:
        - users
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    put:
      description: "Update user by userId"
      tags:
        - users
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      description: "Delete user by userId"
      tags:
        - users
      security:
        - BearerAuth: [ ]
      responses:
        '204':
          description: "No Content"
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/tickets:
    post:
      description: "Book a ticket"
      tags:
        - tickets
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookTicket'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "Flight not found or unavailable"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      description: "Get all tickets of the user"
      tags:
        - tickets
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /users/tickets/{ticketId}:
    parameters:
      - name: ticketId
        in: path
        required: true
        schema:
          type: string
    get:
      description: "Get user's ticket by its ticketId"
      security:
        - BearerAuth: []
      tags:
        - tickets
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "Ticket not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      description: "Update ticket by its id"
      tags:
        - tickets
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicket'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "Ticket not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      description: "Delete ticket by its id"
      tags:
        - tickets
      security:
        - BearerAuth: [ ]
      responses:
        '204':
          description: "No Content"
        '400':
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "Ticket not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'